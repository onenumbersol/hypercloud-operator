package k8s.example.client.metering;

import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.Date;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;


public class Test {

	public static void main(String[] args) throws Exception {
		String token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWTmtnRk9kVVdmNGJfbHBKZWtDU2Izek52SWx6SmNtQ21sYzhyRGxWam44In0.eyJleHAiOjE2MDMwODkwNzMsImlhdCI6MTYwMzA4NTQ3MywianRpIjoiMGM0Mjg3YjctZDJjMC00ZmJkLTkyMGItZmVjYWViY2I2NzYxIiwiaXNzIjoiaHR0cHM6Ly8xNzIuMjIuNi4xMS9hdXRoL3JlYWxtcy90bWF4IiwiYXVkIjpbInJlYWxtLW1hbmFnZW1lbnQiLCJicm9rZXIiLCJhY2NvdW50Il0sInN1YiI6Ijc5MWJiNmM1LTQzZjAtNDk3OS1iNWJkLTUxNzIyZDRlMTcyZiIsInR5cCI6IkJlYXJlciIsImF6cCI6Imh5cGVyY2xvdWQ0Iiwic2Vzc2lvbl9zdGF0ZSI6ImE0ODQxYWQ0LWM5MzMtNGNhZS04NGQxLTMyODZlNWIxNzM4NyIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiaHlwZXJhdXRoIHRtYXggcmVhbG0gYWxsIHJvbGUiLCJ0ZXN0Iiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7InJlYWxtLW1hbmFnZW1lbnQiOnsicm9sZXMiOlsidmlldy1yZWFsbSIsInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwibWFuYWdlLWlkZW50aXR5LXByb3ZpZGVycyIsImltcGVyc29uYXRpb24iLCJyZWFsbS1hZG1pbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwiYnJva2VyIjp7InJvbGVzIjpbInJlYWQtdG9rZW4iXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LWFwcGxpY2F0aW9ucyIsInZpZXctY29uc2VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwibWFuYWdlLWNvbnNlbnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGdyb3VwIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImJhbmxpc3QiOiJraWFsaSIsInBob25lIjoiMDAwLTAwMDAtMDAwNSIsIm5hbWUiOiJoYy0gYWRtaW4iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJhZG1pbkB0bWF4LmNvLmtyIiwibG9jYWxlIjoia28iLCJnaXZlbl9uYW1lIjoiaGMtIiwiZmFtaWx5X25hbWUiOiJhZG1pbiIsImVtYWlsIjoiYWRtaW5AdG1heC5jby5rciIsImdyb3VwIjpbImh5cGVyY2xvdWQ0Il19.ClS0OiVdhfRtPB-LPO2IDemLd4e37hC9GxzCON6nAk90w7Yt2-CZ6bENDxYOtQZKs1gdgiIScDMUpmrWuQJpbVv8vm4qbZDsZmFNJLdU1ozgswCG0YLhxQ3ZjHwVaAUrfCzJ0ioQ1MiEwEMTDL600zt6lgfOOB3IXM-BGGuPqBCSIXwvGdL26kVRhVVDwDzpWCtRswMpQdl5ZLy4kGZNBOxUoffiZPytMfpkD3DhGvqnpbF8hckXv4h5Faf3GEmqlU_Nlyjl2KG3SGEBYwamsE_z2w-NeWjy_XiHT5gam_4b9wjLmJHCo7ltDaRIW0J8x4BfZ7xIkiqQKo3F_BB9YQ";
		String certs = "MIIClzCCAX8CBgFz5eoPrjANBgkqhkiG9w0BAQsFADAPMQ0wCwYDVQQDDAR0bWF4MB4XDTIwMDgxMzAzNDEyOFoXDTMwMDgxMzAzNDMwOFowDzENMAsGA1UEAwwEdG1heDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIr0T2YbiRaVQHnsP17tRiWa7+67+Pin2qYN4sTnOJX746ST2ONvREa5hoNvvy+sVmukSZJHzTYK26vpqaieAclFv/lrDR4mlXwXnIxaAPaCdheh4es2Kt5w+ru3mp1jBqKcKU6Snigk1ZYrEmEtQ4XqSxkTTtnmDev2Vv82rev3Lzi0lcbRW8YZHyyq5FZpVb5VjdSiaxroQ0lzM8tzskG6Tzcy0VW5w72E74xr99yi/yOWe5mrNeiXF9PKyC80f5pyOyg3Vx5/q1YlDOgHdVg9LG5bkwSOoQxROvwLx7J6DBLejrxFjU8kXmbIa4GkzDe99ghlC9MaLgYyKG8ePHcCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAXF2PXgwU+1tgzIt1u62pXu8OT+fGppTJr+bfCNTdgiRMjjUaBuFyAzyB8ttTd650ThdkDpLEKxJQIZ5hqDTn3EKtgGCP3uuchOb2Qwn3Bg2UvOFGew+2gBaFIoMHISKQSspjU3pcaAM+VyJhfXAEDQ6CBiuJynJx1OUl/W6RwvJuWVqAfK0jgnPcmR0TlOB99ZjKIla6tf2ZjniaRBMVb7xXiPMbCZNGSDMGyfXgmsOKUjrMlgtflcqmB4Lgo2Uj70lPG+GExwrGenhSPOjyH5u5UCsLv3dzCChCN91epi8imjkf1+UknVLpPMQbzlECbl52nL26cJ/Df3k1m10q+A==";

		byte[] certificateData = Base64.getDecoder().decode(certs);
		CertificateFactory cf = CertificateFactory.getInstance("X509");
		X509Certificate certificate = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(certificateData));
		PublicKey publicKey = certificate.getPublicKey();
		verifyToken( token, publicKey);
	}

	private static void verifyToken(String token, PublicKey publicKey ) throws JWTVerificationException, NoSuchAlgorithmException, InvalidKeySpecException {
		JWTVerifier verifier = JWT.require(Algorithm.RSA256((RSAPublicKey) publicKey, null)).build();
		DecodedJWT jwt = verifier.verify(token);
		if (jwt.getExpiresAt().before(new Date())) {
			System.out.println("Expired");
		}
		System.out.println("passed");
	}
}
