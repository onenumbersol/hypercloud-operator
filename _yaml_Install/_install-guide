
1-1. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/1.initialization.yaml 실행

1-2. HyperCloud CRDs Definition Yaml 적용
	- Auth/UserCRD.yaml
	- Auth/UsergroupCRD.yaml
	- Auth/TokenCRD.yaml
	- Auth/ClientCRD.yaml
	- Auth/UserSecurityPolicyCRD.yaml
	- Auth/clusterMenuPolicyCRD.yaml
	- Claim/NamespaceClaimCRD.yaml
	- Claim/ResourceQuotaClaimCRD.yaml
	- Claim/RoleBindingClaimCRD.yaml
	- Registry/RegistryCRD.yaml
	- Registry/ImageCRD.yaml
	- Template/TemplateCRD_v1beta1.yaml
	- Template/TemplateInstanceCRD_v1beta1.yaml
	- Template/CatalogServiceCalimCRD_v1beta1.yaml

2. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/2.mysql-settings.yaml 실행

3. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/3.mysql-create.yaml 실행

4. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/4-1.proauth-init.yaml 실행 &
https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/4-2.proauth-db.yaml 실행

4-1. proauth-db는 최초로 기동시 20~30분 정도가 소요될 수 있음.
  * proauth-db 기동 확인
  	1) kubectl get pod -n proauth-system 명령어를 통해 뜨고 있는 proauth-db pod 이름을 복사한다. Ex) proauth-db-deployment-7bcbf5dc5b-gllhp
  	2) Ex) kubectl exec -it proauth-db-deployment-7bcbf5dc5b-gllhp -n proauth-system bash 명령어를 통해 proauth-db pod로 접속한다.
  	3) /tibero 경로에 있는 cmdlog를 확인한다.
  	4) SQL> SQL>    2    3    4    5    6    7    8    9   10   11   12
		Table 'OAUTH.PO_SCHEDULE_TARGET' created.
	   SQL> SQL>
		1 row inserted.
	   SQL> SQL> Disconnected.
	   등으로 끝나는 default table을 만들어주는 로그가 있으면 완료가 된것

4-2. Host OS가 CentOS 일때
  * 1) proauth-db.yaml 의 주석 부분을 해제해주고 적용시킨다
  	2) kubelet 설정에서도 적용해주어야 함
		/var/lib/kubelet/kubeadm-flags.env 에 --allowed-unsafe-sysctls=kernel.sem 추가
		kubelet 재기동 (systemctl daemon-reload && systemctl restart kubelet)     	

5. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/5.proauth-server.yaml 실행 

6. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/6.hypercloud4-operator.yaml 실행
	* {HPCD_VERSION}의 값을 설치할 이미지의 버전으로 수정한다.
		Example: b4.1.0.41

7. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/7.secret-watcher.yaml 실행

8. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/8.default-auth-object-init.yaml 실행

9. authenticate webhook 설정 (http://192.168.1.150:10080/hypercloud/hypercloud-operator/wikis/WebHook-Guide)      
  
10. https://github.com/tmax-cloud/hypercloud-operator/blob/master/_yaml_Install/9.nginx-controller.yaml 실행
	* 내용 수정(필수)
		# export INGRESS_NGINX_NAME=ingress-nginx-shared
		# export INGRESS_CLASS=nginx-shd
		# export NGINX_INGRESS_VERSION=0.33.0
		# export KUBE_WEBHOOK_CERTGEN_VERSION=v1.2.2
		# sed -i 's/ingress-nginx/'${INGRESS_NGINX_NAME}'/g' 9.nginx-controller.yaml
		# sed -i 's/--ingress-class=nginx/--ingress-class='${INGRESS_CLASS}'/g' 9.nginx-controller.yaml
		# sed -i 's/ingress-controller-leader-nginx/ingress-controller-leader-'${INGRESS_CLASS}'/g' 9.nginx-controller.yaml
		# sed -i 's/{nginx_ingress_version}/'${NGINX_INGRESS_VERSION}'/g' 9.nginx-controller.yaml
 		# sed -i 's/{kube_webhook_certgen_version}/'${KUBE_WEBHOOK_CERTGEN_VERSION}'/g' 9.nginx-controller.yaml

