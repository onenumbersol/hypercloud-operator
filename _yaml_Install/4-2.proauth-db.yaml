kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: proauth-db-data
  namespace: proauth-system
spec:
  storageClassName: csi-cephfs-sc
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: proauth-db-deployment
  namespace: proauth-system
  labels:
    proauth: db
spec:
  replicas: 1
  selector:
    matchLabels:
      proauth: db
  template:
    metadata:
      name: proauth-pod
      labels:
        proauth: db
    spec:
      containers:
      - name: proauth-db
        image: 192.168.6.110:5000/proauth_db:d027
        ports:
        - containerPort: 8629
        volumeMounts:
        - mountPath: /tibero/mnt/tibero
          name: proauth-data
        env:
        - name: TCS_INSTALL
          value: "1"   # For first Time, set "1" -> From Second Time, set "0"
        - name: TCS_MAX_SESSCNT
          value: "100"
        - name: TCS_SID
          value: "tibero"
        - name: TB_SID
          value: "tibero"
        - name: TCS_TOTAL_SHM_SIZE
          value: "1G"
        - name: TCS_MEMORY_TARGET
          value: "2G"
        - name: TCS_PORT
          value: "8629"
        resources:
          limits:
            cpu: "1"
            memory: "3Gi"
      volumes:
      - name: proauth-data
        persistentVolumeClaim:
          claimName: proauth-db-data
#      spec:       # If Host OS is CentOS, Apply this 
#        securityContext:
#          sysctls:
#          - name: kernel.sem
#            value: "10000 32000 500 10000"          

---

apiVersion: v1
kind: Service
metadata:
  name: proauth-db-service
  namespace: proauth-system
spec:
  ports:
  - name: base
    port: 8629
    targetPort: 8629
    nodePort: 32222
  selector:
    proauth: db
  type: NodePort
  
---

# If Host OS is CentOS, Apply This
#apiVersion: policy/v1beta1
#kind: PodSecurityPolicy
#metadata:
#  name: proauth-db-security-policy
#  namespace: proauth-system
#spec:
#  allowedUnsafeSysctls:
#  - kernel.sem
#  runAsUser:
#    rule: 'RunAsAny'
#  seLinux:
#    rule: 'RunAsAny'
#  supplementalGroups:
#    rule: 'RunAsAny'
#  fsGroup:
#    rule: 'RunAsAny'
  