apiVersion: tmax.io/v1
kind: Template
metadata:
  name: apache-cicd-template
  namespace: default
  annotations:
    template-version: 1.0.2
    tested-operator-version: 4.1.0.23
  labels:
    cicd-template-was: apache
imageUrl: https://upload.wikimedia.org/wikipedia/commons/4/45/Apache_HTTP_server_logo_%282016%29.png
provider: tmax
recommend: false
shortDescription: Apache CI/CD Template
longDescription: Apache CI/CD Template
tags:
- was
- apache
plans:
- bindable: false
  description: apache
  name: apache-plan1
parameters:
- name: APP_NAME
  displayName: AppName
  description: Application name
  required: true
- name: NAMESPACE
  displayName: Namespace
  description: Application namespace
  required: true
- name: GIT_URL
  displayName: GitURL
  description: Git Repo. URL
  required: true
- name: GIT_REV
  displayName: GitRev
  description: Git Revision
  required: true
- name: IMAGE_URL
  displayName: ImageURL
  description: Output Image URL
  required: true
- name: REGISTRY_SECRET_NAME
  displayName: RegistrySecret
  description: Secret for accessing image registry
  required: false
  value: ''
- name: SERVICE_ACCOUNT_NAME
  displayName: serviceAccountName
  description: Service Account Name
  required: true
- name: WAS_PORT
  displayName: wasPort
  description: WAS Port
  valueType: number
  required: true
- name: SERVICE_TYPE
  displayName: ServiceType
  description: Service Type (ClusterIP/NodePort/LoadBalancer)
  required: true
- name: PACKAGE_SERVER_URL
  displayName: PackageServerUrl
  description: URL (including protocol, ip, port, and path) of private package server
    (e.g., devpi, pypi, verdaccio, ...)
  required: false
- name: DEPLOY_ENV_JSON
  displayName: DeployEnvJson
  description: Deployment environment variable in JSON object form
  required: false
  value: '{}'
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-service
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    type: ${SERVICE_TYPE}
    ports:
    - port: ${WAS_PORT}
    selector:
      app: ${APP_NAME}
      tier: was
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APP_NAME}-deploy-cfg
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  data:
    deploy-spec.yaml: |
      spec:
        selector:
          matchLabels:
            app: ${APP_NAME}
            tier: was
        template:
          metadata:
            labels:
              app: ${APP_NAME}
              tier: was
          spec:
            imagePullSecrets:
            - name: ${REGISTRY_SECRET_NAME}
            containers:
            - ports:
              - containerPort: ${WAS_PORT}
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineResource
  metadata:
    name: ${APP_NAME}-input-git
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    type: git
    params:
    - name: revision
      value: ${GIT_REV}
    - name: url
      value: ${GIT_URL}
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineResource
  metadata:
    name: ${APP_NAME}-output-image
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    type: image
    params:
    - name: url
      value: ${IMAGE_URL}
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: ${APP_NAME}-pipeline
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    resources:
    - name: source-repo
      type: git
    - name: image
      type: image
    params:
    - name: app-name
      type: string
      description: Application name
    - name: deploy-cfg-name
      description: Configmap name for description
    - name: deploy-env-json
      description: Deployment environment variable in JSON object form
    tasks:
    - name: build-source
      taskRef:
        name: s2i
        kind: ClusterTask
      params:
      - name: BUILDER_IMAGE
        value: tmaxcloudck/s2i-apache:2.4
      - name: PACKAGE_SERVER_URL
        value: ${PACKAGE_SERVER_URL}
      - name: REGISTRY_SECRET_NAME
        value: ${REGISTRY_SECRET_NAME}
      resources:
        inputs:
        - name: source
          resource: source-repo
        outputs:
        - name: image
          resource: image
    - name: scan-and-sign-image
      taskRef:
        name: analyze-image-vulnerabilities
        kind: ClusterTask
      resources:
        inputs:
        - name: scanned-image
          resource: image
          from:
          - build-source
      params:
      - name: image-url
        value: $(tasks.build-source.results.image-url)
    - name: deploy
      taskRef:
        name: generate-and-deploy-using-kubectl
        kind: ClusterTask
      runAfter:
      - scan-and-sign-image
      resources:
        inputs:
        - name: image
          resource: image
      params:
      - name: app-name
        value: $(params.app-name)
      - name: image-url
        value: $(tasks.build-source.results.image-url)
      - name: deploy-cfg-name
        value: $(params.deploy-cfg-name)
      - name: deploy-env-json
        value: $(params.deploy-env-json)
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineRun
  metadata:
    generateName: ${APP_NAME}-pipeline-run-
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    serviceAccountName: ${SERVICE_ACCOUNT_NAME}
    pipelineRef:
      name: ${APP_NAME}-pipeline
    resources:
    - name: source-repo
      resourceRef:
        name: ${APP_NAME}-input-git
    - name: image
      resourceRef:
        name: ${APP_NAME}-output-image
    params:
    - name: app-name
      value: ${APP_NAME}
    - name: deploy-cfg-name
      value: ${APP_NAME}-deploy-cfg
    - name: deploy-env-json
      value: ${DEPLOY_ENV_JSON}
